module integerEq where
  open import Data.Integer
  open import Data.Nat as ℕ  
  open import Data.Bool

  _eq_ : ℤ → ℤ → Bool
  (+ ℕ.zero) eq (+ ℕ.zero) = true
  (+ ℕ.suc m) eq (+ ℕ.zero) = false
  (+ ℕ.zero) eq (+ ℕ.suc n) = false
  -[1+ m ] eq (+ ℕ.zero) = false
  (-[1+ ℕ.zero ]) eq (-[1+ ℕ.zero ]) = true
  -[1+ ℕ.zero ] eq -[1+ ℕ.suc n ] = false
  -[1+ ℕ.suc m ] eq -[1+ ℕ.zero ] = false
  (+ ℕ.zero) eq -[1+ n ] = false
  (+ ℕ.suc m) eq -[1+ n ] = false
  -[1+ m ] eq (+ ℕ.suc n) = false
  (+ ℕ.suc m) eq (+ ℕ.suc n) = (+ m) eq (+ n)
  -[1+ ℕ.suc m ] eq -[1+ ℕ.suc n ] = -[1+ m ] eq -[1+ n ]
  
